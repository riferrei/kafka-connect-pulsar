/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.riferrei.kafka.connect.pulsar;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroGenComplexType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3631823969398320585L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroGenComplexType\",\"namespace\":\"com.riferrei.kafka.connect.pulsar\",\"fields\":[{\"name\":\"stringField\",\"type\":\"string\"},{\"name\":\"booleanField\",\"type\":\"boolean\"},{\"name\":\"bytesField\",\"type\":\"bytes\"},{\"name\":\"intField\",\"type\":\"int\"},{\"name\":\"longField\",\"type\":\"long\"},{\"name\":\"floatField\",\"type\":\"float\"},{\"name\":\"doubleField\",\"type\":\"double\"},{\"name\":\"mapField\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"double\"}],\"default\":null},{\"name\":\"innerField\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AvroGenInnerType\",\"fields\":[{\"name\":\"doubleField\",\"type\":\"double\"},{\"name\":\"arrayField\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"enumField\",\"type\":{\"type\":\"enum\",\"name\":\"AvroGenMultipleOptions\",\"symbols\":[\"FirstOption\",\"SecondOption\",\"ThirdOption\",\"FourthOption\"],\"default\":\"FirstOption\"}}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroGenComplexType> ENCODER =
      new BinaryMessageEncoder<AvroGenComplexType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroGenComplexType> DECODER =
      new BinaryMessageDecoder<AvroGenComplexType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroGenComplexType> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroGenComplexType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroGenComplexType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroGenComplexType>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroGenComplexType to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroGenComplexType from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroGenComplexType instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroGenComplexType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence stringField;
  @Deprecated public boolean booleanField;
  @Deprecated public java.nio.ByteBuffer bytesField;
  @Deprecated public int intField;
  @Deprecated public long longField;
  @Deprecated public float floatField;
  @Deprecated public double doubleField;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Double> mapField;
  @Deprecated public com.riferrei.kafka.connect.pulsar.AvroGenInnerType innerField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroGenComplexType() {}

  /**
   * All-args constructor.
   * @param stringField The new value for stringField
   * @param booleanField The new value for booleanField
   * @param bytesField The new value for bytesField
   * @param intField The new value for intField
   * @param longField The new value for longField
   * @param floatField The new value for floatField
   * @param doubleField The new value for doubleField
   * @param mapField The new value for mapField
   * @param innerField The new value for innerField
   */
  public AvroGenComplexType(java.lang.CharSequence stringField, java.lang.Boolean booleanField, java.nio.ByteBuffer bytesField, java.lang.Integer intField, java.lang.Long longField, java.lang.Float floatField, java.lang.Double doubleField, java.util.Map<java.lang.CharSequence,java.lang.Double> mapField, com.riferrei.kafka.connect.pulsar.AvroGenInnerType innerField) {
    this.stringField = stringField;
    this.booleanField = booleanField;
    this.bytesField = bytesField;
    this.intField = intField;
    this.longField = longField;
    this.floatField = floatField;
    this.doubleField = doubleField;
    this.mapField = mapField;
    this.innerField = innerField;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stringField;
    case 1: return booleanField;
    case 2: return bytesField;
    case 3: return intField;
    case 4: return longField;
    case 5: return floatField;
    case 6: return doubleField;
    case 7: return mapField;
    case 8: return innerField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stringField = (java.lang.CharSequence)value$; break;
    case 1: booleanField = (java.lang.Boolean)value$; break;
    case 2: bytesField = (java.nio.ByteBuffer)value$; break;
    case 3: intField = (java.lang.Integer)value$; break;
    case 4: longField = (java.lang.Long)value$; break;
    case 5: floatField = (java.lang.Float)value$; break;
    case 6: doubleField = (java.lang.Double)value$; break;
    case 7: mapField = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 8: innerField = (com.riferrei.kafka.connect.pulsar.AvroGenInnerType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stringField' field.
   * @return The value of the 'stringField' field.
   */
  public java.lang.CharSequence getStringField() {
    return stringField;
  }


  /**
   * Sets the value of the 'stringField' field.
   * @param value the value to set.
   */
  public void setStringField(java.lang.CharSequence value) {
    this.stringField = value;
  }

  /**
   * Gets the value of the 'booleanField' field.
   * @return The value of the 'booleanField' field.
   */
  public boolean getBooleanField() {
    return booleanField;
  }


  /**
   * Sets the value of the 'booleanField' field.
   * @param value the value to set.
   */
  public void setBooleanField(boolean value) {
    this.booleanField = value;
  }

  /**
   * Gets the value of the 'bytesField' field.
   * @return The value of the 'bytesField' field.
   */
  public java.nio.ByteBuffer getBytesField() {
    return bytesField;
  }


  /**
   * Sets the value of the 'bytesField' field.
   * @param value the value to set.
   */
  public void setBytesField(java.nio.ByteBuffer value) {
    this.bytesField = value;
  }

  /**
   * Gets the value of the 'intField' field.
   * @return The value of the 'intField' field.
   */
  public int getIntField() {
    return intField;
  }


  /**
   * Sets the value of the 'intField' field.
   * @param value the value to set.
   */
  public void setIntField(int value) {
    this.intField = value;
  }

  /**
   * Gets the value of the 'longField' field.
   * @return The value of the 'longField' field.
   */
  public long getLongField() {
    return longField;
  }


  /**
   * Sets the value of the 'longField' field.
   * @param value the value to set.
   */
  public void setLongField(long value) {
    this.longField = value;
  }

  /**
   * Gets the value of the 'floatField' field.
   * @return The value of the 'floatField' field.
   */
  public float getFloatField() {
    return floatField;
  }


  /**
   * Sets the value of the 'floatField' field.
   * @param value the value to set.
   */
  public void setFloatField(float value) {
    this.floatField = value;
  }

  /**
   * Gets the value of the 'doubleField' field.
   * @return The value of the 'doubleField' field.
   */
  public double getDoubleField() {
    return doubleField;
  }


  /**
   * Sets the value of the 'doubleField' field.
   * @param value the value to set.
   */
  public void setDoubleField(double value) {
    this.doubleField = value;
  }

  /**
   * Gets the value of the 'mapField' field.
   * @return The value of the 'mapField' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMapField() {
    return mapField;
  }


  /**
   * Sets the value of the 'mapField' field.
   * @param value the value to set.
   */
  public void setMapField(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.mapField = value;
  }

  /**
   * Gets the value of the 'innerField' field.
   * @return The value of the 'innerField' field.
   */
  public com.riferrei.kafka.connect.pulsar.AvroGenInnerType getInnerField() {
    return innerField;
  }


  /**
   * Sets the value of the 'innerField' field.
   * @param value the value to set.
   */
  public void setInnerField(com.riferrei.kafka.connect.pulsar.AvroGenInnerType value) {
    this.innerField = value;
  }

  /**
   * Creates a new AvroGenComplexType RecordBuilder.
   * @return A new AvroGenComplexType RecordBuilder
   */
  public static com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder newBuilder() {
    return new com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder();
  }

  /**
   * Creates a new AvroGenComplexType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroGenComplexType RecordBuilder
   */
  public static com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder newBuilder(com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder other) {
    if (other == null) {
      return new com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder();
    } else {
      return new com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder(other);
    }
  }

  /**
   * Creates a new AvroGenComplexType RecordBuilder by copying an existing AvroGenComplexType instance.
   * @param other The existing instance to copy.
   * @return A new AvroGenComplexType RecordBuilder
   */
  public static com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder newBuilder(com.riferrei.kafka.connect.pulsar.AvroGenComplexType other) {
    if (other == null) {
      return new com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder();
    } else {
      return new com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroGenComplexType instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroGenComplexType>
    implements org.apache.avro.data.RecordBuilder<AvroGenComplexType> {

    private java.lang.CharSequence stringField;
    private boolean booleanField;
    private java.nio.ByteBuffer bytesField;
    private int intField;
    private long longField;
    private float floatField;
    private double doubleField;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> mapField;
    private com.riferrei.kafka.connect.pulsar.AvroGenInnerType innerField;
    private com.riferrei.kafka.connect.pulsar.AvroGenInnerType.Builder innerFieldBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stringField)) {
        this.stringField = data().deepCopy(fields()[0].schema(), other.stringField);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.booleanField)) {
        this.booleanField = data().deepCopy(fields()[1].schema(), other.booleanField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bytesField)) {
        this.bytesField = data().deepCopy(fields()[2].schema(), other.bytesField);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.intField)) {
        this.intField = data().deepCopy(fields()[3].schema(), other.intField);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.longField)) {
        this.longField = data().deepCopy(fields()[4].schema(), other.longField);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.floatField)) {
        this.floatField = data().deepCopy(fields()[5].schema(), other.floatField);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.doubleField)) {
        this.doubleField = data().deepCopy(fields()[6].schema(), other.doubleField);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.mapField)) {
        this.mapField = data().deepCopy(fields()[7].schema(), other.mapField);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.innerField)) {
        this.innerField = data().deepCopy(fields()[8].schema(), other.innerField);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasInnerFieldBuilder()) {
        this.innerFieldBuilder = com.riferrei.kafka.connect.pulsar.AvroGenInnerType.newBuilder(other.getInnerFieldBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroGenComplexType instance
     * @param other The existing instance to copy.
     */
    private Builder(com.riferrei.kafka.connect.pulsar.AvroGenComplexType other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stringField)) {
        this.stringField = data().deepCopy(fields()[0].schema(), other.stringField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booleanField)) {
        this.booleanField = data().deepCopy(fields()[1].schema(), other.booleanField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytesField)) {
        this.bytesField = data().deepCopy(fields()[2].schema(), other.bytesField);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.intField)) {
        this.intField = data().deepCopy(fields()[3].schema(), other.intField);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longField)) {
        this.longField = data().deepCopy(fields()[4].schema(), other.longField);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.floatField)) {
        this.floatField = data().deepCopy(fields()[5].schema(), other.floatField);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.doubleField)) {
        this.doubleField = data().deepCopy(fields()[6].schema(), other.doubleField);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mapField)) {
        this.mapField = data().deepCopy(fields()[7].schema(), other.mapField);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.innerField)) {
        this.innerField = data().deepCopy(fields()[8].schema(), other.innerField);
        fieldSetFlags()[8] = true;
      }
      this.innerFieldBuilder = null;
    }

    /**
      * Gets the value of the 'stringField' field.
      * @return The value.
      */
    public java.lang.CharSequence getStringField() {
      return stringField;
    }


    /**
      * Sets the value of the 'stringField' field.
      * @param value The value of 'stringField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setStringField(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stringField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stringField' field has been set.
      * @return True if the 'stringField' field has been set, false otherwise.
      */
    public boolean hasStringField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stringField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearStringField() {
      stringField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'booleanField' field.
      * @return The value.
      */
    public boolean getBooleanField() {
      return booleanField;
    }


    /**
      * Sets the value of the 'booleanField' field.
      * @param value The value of 'booleanField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setBooleanField(boolean value) {
      validate(fields()[1], value);
      this.booleanField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'booleanField' field has been set.
      * @return True if the 'booleanField' field has been set, false otherwise.
      */
    public boolean hasBooleanField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'booleanField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearBooleanField() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesField' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBytesField() {
      return bytesField;
    }


    /**
      * Sets the value of the 'bytesField' field.
      * @param value The value of 'bytesField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setBytesField(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.bytesField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesField' field has been set.
      * @return True if the 'bytesField' field has been set, false otherwise.
      */
    public boolean hasBytesField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bytesField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearBytesField() {
      bytesField = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'intField' field.
      * @return The value.
      */
    public int getIntField() {
      return intField;
    }


    /**
      * Sets the value of the 'intField' field.
      * @param value The value of 'intField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setIntField(int value) {
      validate(fields()[3], value);
      this.intField = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'intField' field has been set.
      * @return True if the 'intField' field has been set, false otherwise.
      */
    public boolean hasIntField() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'intField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearIntField() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longField' field.
      * @return The value.
      */
    public long getLongField() {
      return longField;
    }


    /**
      * Sets the value of the 'longField' field.
      * @param value The value of 'longField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setLongField(long value) {
      validate(fields()[4], value);
      this.longField = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longField' field has been set.
      * @return True if the 'longField' field has been set, false otherwise.
      */
    public boolean hasLongField() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearLongField() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'floatField' field.
      * @return The value.
      */
    public float getFloatField() {
      return floatField;
    }


    /**
      * Sets the value of the 'floatField' field.
      * @param value The value of 'floatField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setFloatField(float value) {
      validate(fields()[5], value);
      this.floatField = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'floatField' field has been set.
      * @return True if the 'floatField' field has been set, false otherwise.
      */
    public boolean hasFloatField() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'floatField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearFloatField() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'doubleField' field.
      * @return The value.
      */
    public double getDoubleField() {
      return doubleField;
    }


    /**
      * Sets the value of the 'doubleField' field.
      * @param value The value of 'doubleField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setDoubleField(double value) {
      validate(fields()[6], value);
      this.doubleField = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'doubleField' field has been set.
      * @return True if the 'doubleField' field has been set, false otherwise.
      */
    public boolean hasDoubleField() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'doubleField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearDoubleField() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapField' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMapField() {
      return mapField;
    }


    /**
      * Sets the value of the 'mapField' field.
      * @param value The value of 'mapField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setMapField(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[7], value);
      this.mapField = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mapField' field has been set.
      * @return True if the 'mapField' field has been set, false otherwise.
      */
    public boolean hasMapField() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mapField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearMapField() {
      mapField = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'innerField' field.
      * @return The value.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenInnerType getInnerField() {
      return innerField;
    }


    /**
      * Sets the value of the 'innerField' field.
      * @param value The value of 'innerField'.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setInnerField(com.riferrei.kafka.connect.pulsar.AvroGenInnerType value) {
      validate(fields()[8], value);
      this.innerFieldBuilder = null;
      this.innerField = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'innerField' field has been set.
      * @return True if the 'innerField' field has been set, false otherwise.
      */
    public boolean hasInnerField() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'innerField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.riferrei.kafka.connect.pulsar.AvroGenInnerType.Builder getInnerFieldBuilder() {
      if (innerFieldBuilder == null) {
        if (hasInnerField()) {
          setInnerFieldBuilder(com.riferrei.kafka.connect.pulsar.AvroGenInnerType.newBuilder(innerField));
        } else {
          setInnerFieldBuilder(com.riferrei.kafka.connect.pulsar.AvroGenInnerType.newBuilder());
        }
      }
      return innerFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'innerField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder setInnerFieldBuilder(com.riferrei.kafka.connect.pulsar.AvroGenInnerType.Builder value) {
      clearInnerField();
      innerFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'innerField' field has an active Builder instance
     * @return True if the 'innerField' field has an active Builder instance
     */
    public boolean hasInnerFieldBuilder() {
      return innerFieldBuilder != null;
    }

    /**
      * Clears the value of the 'innerField' field.
      * @return This builder.
      */
    public com.riferrei.kafka.connect.pulsar.AvroGenComplexType.Builder clearInnerField() {
      innerField = null;
      innerFieldBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroGenComplexType build() {
      try {
        AvroGenComplexType record = new AvroGenComplexType();
        record.stringField = fieldSetFlags()[0] ? this.stringField : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.booleanField = fieldSetFlags()[1] ? this.booleanField : (java.lang.Boolean) defaultValue(fields()[1]);
        record.bytesField = fieldSetFlags()[2] ? this.bytesField : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.intField = fieldSetFlags()[3] ? this.intField : (java.lang.Integer) defaultValue(fields()[3]);
        record.longField = fieldSetFlags()[4] ? this.longField : (java.lang.Long) defaultValue(fields()[4]);
        record.floatField = fieldSetFlags()[5] ? this.floatField : (java.lang.Float) defaultValue(fields()[5]);
        record.doubleField = fieldSetFlags()[6] ? this.doubleField : (java.lang.Double) defaultValue(fields()[6]);
        record.mapField = fieldSetFlags()[7] ? this.mapField : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[7]);
        if (innerFieldBuilder != null) {
          try {
            record.innerField = this.innerFieldBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("innerField"));
            throw e;
          }
        } else {
          record.innerField = fieldSetFlags()[8] ? this.innerField : (com.riferrei.kafka.connect.pulsar.AvroGenInnerType) defaultValue(fields()[8]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroGenComplexType>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroGenComplexType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroGenComplexType>
    READER$ = (org.apache.avro.io.DatumReader<AvroGenComplexType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.stringField);

    out.writeBoolean(this.booleanField);

    out.writeBytes(this.bytesField);

    out.writeInt(this.intField);

    out.writeLong(this.longField);

    out.writeFloat(this.floatField);

    out.writeDouble(this.doubleField);

    if (this.mapField == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.mapField.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Double> e0: this.mapField.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.lang.Double v0 = e0.getValue();
        out.writeDouble(v0);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.innerField == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.innerField.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.stringField = in.readString(this.stringField instanceof Utf8 ? (Utf8)this.stringField : null);

      this.booleanField = in.readBoolean();

      this.bytesField = in.readBytes(this.bytesField);

      this.intField = in.readInt();

      this.longField = in.readLong();

      this.floatField = in.readFloat();

      this.doubleField = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.mapField = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.Double> m0 = this.mapField; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size0);
          this.mapField = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.lang.Double v0 = null;
            v0 = in.readDouble();
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.innerField = null;
      } else {
        if (this.innerField == null) {
          this.innerField = new com.riferrei.kafka.connect.pulsar.AvroGenInnerType();
        }
        this.innerField.customDecode(in);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.stringField = in.readString(this.stringField instanceof Utf8 ? (Utf8)this.stringField : null);
          break;

        case 1:
          this.booleanField = in.readBoolean();
          break;

        case 2:
          this.bytesField = in.readBytes(this.bytesField);
          break;

        case 3:
          this.intField = in.readInt();
          break;

        case 4:
          this.longField = in.readLong();
          break;

        case 5:
          this.floatField = in.readFloat();
          break;

        case 6:
          this.doubleField = in.readDouble();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mapField = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.Double> m0 = this.mapField; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.Double>((int)size0);
              this.mapField = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.lang.Double v0 = null;
                v0 = in.readDouble();
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.innerField = null;
          } else {
            if (this.innerField == null) {
              this.innerField = new com.riferrei.kafka.connect.pulsar.AvroGenInnerType();
            }
            this.innerField.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










